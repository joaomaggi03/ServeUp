/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import Controller.ControladorCliente;
import model.Cliente;

/**
 *
 * @author Joao Maggi
 */
public class TelaCadastroCliente extends javax.swing.JFrame {

    private static TelaCadastroCliente TelaCadastroClienteUnic;
     
    public static TelaCadastroCliente geraCadCli() {
        if (TelaCadastroClienteUnic == null) {
            TelaCadastroClienteUnic = new TelaCadastroCliente();
        }
        return TelaCadastroClienteUnic;
    }
    
    /**
     * Creates new form TelaCadastroProduto
     */
    public TelaCadastroCliente() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        textClienteNome = new javax.swing.JTextField();
        textClienteEmail = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        textClienteCpf = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        btnCadastrarCliente = new javax.swing.JButton();
        btnVoltar = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("SERVE UP");

        jLabel2.setText("CADASTRO CLIENTE");

        jLabel3.setText("NOME:");

        textClienteNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textClienteNomeActionPerformed(evt);
            }
        });

        textClienteEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textClienteEmailActionPerformed(evt);
            }
        });

        jLabel4.setText("EMAIL:");

        textClienteCpf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textClienteCpfActionPerformed(evt);
            }
        });

        jLabel5.setText("CPF:");

        btnCadastrarCliente.setText("CADASTRAR");
        btnCadastrarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarClienteActionPerformed(evt);
            }
        });

        btnVoltar.setText("VOLTAR");
        btnVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(106, 106, 106)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(textClienteNome, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel5)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textClienteCpf, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel4)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(textClienteEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(116, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(145, 145, 145)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(jLabel1)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(btnVoltar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCadastrarCliente)))
                .addGap(23, 23, 23))
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jSeparator1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(13, 13, 13)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(textClienteNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(textClienteEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(textClienteCpf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 95, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCadastrarCliente)
                    .addComponent(btnVoltar))
                .addGap(16, 16, 16))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textClienteEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textClienteEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textClienteEmailActionPerformed

    private void btnCadastrarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarClienteActionPerformed
        cadastraClientes();
    }//GEN-LAST:event_btnCadastrarClienteActionPerformed

    private void btnVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarActionPerformed
    sair();        // TODO add your handling code here:
    }//GEN-LAST:event_btnVoltarActionPerformed

    private void textClienteNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textClienteNomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textClienteNomeActionPerformed

    private void textClienteCpfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textClienteCpfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textClienteCpfActionPerformed

    
    public void sair(){
            this.dispose();
        }

    public void cadastraClientes() {
        
        String cpf = textClienteCpf.getText();
        String nome = textClienteNome.getText();
        String email = textClienteEmail.getText();

        // Validação CPF, Chama a função
        if (!isValidCPF(cpf)) {
            javax.swing.JOptionPane.showMessageDialog(this, "O CPF digitado é inválido!", "Erro de Validação", javax.swing.JOptionPane.ERROR_MESSAGE);
            return; // Interrompe a execução se o CPF for inválido.
        }

        // Validação para o nome
        if (nome.trim().isEmpty()) {
            javax.swing.JOptionPane.showMessageDialog(this, "O campo Nome é obrigatório!", "Erro de Validação", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Validação Email
        if (!email.trim().isEmpty() && !isValidEmail(email)) {
            javax.swing.JOptionPane.showMessageDialog(this, "O formato do e-mail digitado é inválido!", "Erro de Validação", javax.swing.JOptionPane.ERROR_MESSAGE);
            return; // Interrompe a execução
        }
        
        String cpfApenasNumeros = cpf.replaceAll("[^0-9]", "");

        
        // Cria o objeto Cliente
        Cliente cliente = new Cliente();
        cliente.setCpf(cpfApenasNumeros); // Salva o CPF limpo
        cliente.setNome(nome);
        cliente.setEmail(email);

        // Tenta salvar usando o controlador e dá feedback ao usuário
        try {
            ControladorCliente cont = new ControladorCliente();
            cont.inserir(cliente);

            // Se chegou até aqui, deu tudo certo!
            javax.swing.JOptionPane.showMessageDialog(this, "Cliente cadastrado com sucesso!", "Sucesso", javax.swing.JOptionPane.INFORMATION_MESSAGE);

            // Opcional: Limpar campos após salvar
            textClienteNome.setText("");
            textClienteEmail.setText("");
            textClienteCpf.setText("");

        } catch (RuntimeException e) {
            // Se o controlador lançou um erro (ex: CPF duplicado, que é uma chave primária)
            javax.swing.JOptionPane.showMessageDialog(this, "Erro ao cadastrar cliente:\n" + e.getMessage(), "Erro no Banco de Dados", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }

    private boolean isValidCPF(String cpf) {
        String cpfLimpo = cpf.replaceAll("[^0-9]", "");
        if (cpfLimpo.length() != 11 || cpfLimpo.matches("(\\d)\\1{10}")) {
            return false;
        }
        try {
            int soma = 0;
            for (int i = 0; i < 9; i++) {
                soma += Integer.parseInt(String.valueOf(cpfLimpo.charAt(i))) * (10 - i);
            }
            int digito1 = 11 - (soma % 11);
            if (digito1 >= 10) digito1 = 0;
            if (digito1 != Integer.parseInt(String.valueOf(cpfLimpo.charAt(9)))) return false;
            soma = 0;
            for (int i = 0; i < 10; i++) {
                soma += Integer.parseInt(String.valueOf(cpfLimpo.charAt(i))) * (11 - i);
            }
            int digito2 = 11 - (soma % 11);
            if (digito2 >= 10) digito2 = 0;
            if (digito2 != Integer.parseInt(String.valueOf(cpfLimpo.charAt(10)))) return false;
        } catch (NumberFormatException e) {
            return false;
        }
        return true;
    }

    private boolean isValidEmail(String email) {
        // Primeiro, verifica se o e-mail não é nulo ou vazio
        if (email == null || email.trim().isEmpty()) {
            return false;
        }

        // Expressão Regular (Regex) para validar a maioria dos formatos de e-mail comuns
        String emailRegex = "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$";

        // O método String.matches() retorna true se o texto corresponder ao padrão da regex
        return email.matches(emailRegex);
    }
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCadastrarCliente;
    private javax.swing.JButton btnVoltar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField textClienteCpf;
    private javax.swing.JTextField textClienteEmail;
    private javax.swing.JTextField textClienteNome;
    // End of variables declaration//GEN-END:variables
}
